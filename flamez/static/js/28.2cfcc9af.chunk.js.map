{"version":3,"sources":["views/Pool/index.tsx"],"names":["Body","styled","LiquidityCardBody","theme","colors","dropdownDeep","Pool","account","useActiveWeb3React","t","useTranslation","useState","clickIndex","setIndex","useRouteMatch","url","path","trackedTokenPairs","isExact","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","activeIndex","onItemClick","newIndex","scale","variant","marginBottom","as","Link","to","title","subtitle","color","textAlign","index","pair","mb","flexDirection","alignItems","mt","id","style","width","startIcon"],"mappings":"2TAeMA,EAAOC,YAAOC,KAAPD,CAAH,sDACY,qBAAGE,MAAkBC,OAAOC,gBAGnC,SAASC,IACtB,IAAQC,EAAYC,cAAZD,QACAE,EAAMC,cAAND,EACR,EAA+BE,mBAAS,GAAxC,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAA+BC,cAAjBC,GAAd,EAAQC,KAAR,EAAcD,KAGRE,GAHN,EAAmBC,QAGOC,eACpBC,EAAgCC,mBACpC,kBAAMJ,EAAkBK,KAAI,SAACC,GAAD,MAAa,CAAEC,eAAgBC,YAAmBF,GAASA,eACvF,CAACN,IAEGS,EAAkBL,mBACtB,kBAAMD,EAA8BE,KAAI,SAACK,GAAD,OAAWA,EAAMH,oBACzD,CAACJ,IAEH,EAAkDQ,YAAoC,OACpFrB,QADoF,IACpFA,SAAWsB,EACXH,GAFF,mBAAOI,EAAP,KAAwBC,EAAxB,KAMMC,EAA8BX,mBAClC,kBACED,EAA8Ba,QAAO,kBAAGT,EAAH,EAAGA,eAAH,iBACnCM,EAAgBN,EAAeU,gBADI,aACnC,EAAyCC,YAAY,UAEzD,CAACf,EAA+BU,IAG5BM,EAAUC,YAASL,EAA4BV,KAAI,qBAAGC,WACtDe,EACJP,IAAiC,OAAPK,QAAO,IAAPA,OAAA,EAAAA,EAASG,QAASP,EAA4BO,SAAxE,OAAkFH,QAAlF,IAAkFA,OAAlF,EAAkFA,EAASI,MAAK,SAACC,GAAD,OAAaA,MAEzGC,EAA0BN,EAAQd,KAAI,0CAAoBW,QAAO,SAACU,GAAD,OAA4BC,QAAQD,MAoC3G,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAYE,YAAajC,EAAYkC,YArErB,SAACC,GAAD,OAAclC,EAASkC,IAqEwBC,MAAM,KAAKC,QAAQ,SAAUC,aAAa,OAAzG,UACO,cAAC,IAAD,CAAgBC,GAAIC,IAAMC,GAAG,QAA7B,SACG5C,EAAE,UAEL,cAAC,IAAD,CAAgB0C,GAAIC,IAAMC,GAAE,UAAKtC,GAAjC,SACGN,EAAE,kBAGZ,eAAC,IAAD,WACE,cAAC,IAAD,CAAW6C,MAAO7C,EAAE,kBAAmB8C,SAAU9C,EAAE,6CACnD,eAACT,EAAD,WA1CCO,EAOD+B,EAEA,cAAC,KAAD,CAAMkB,MAAM,aAAaC,UAAU,SAAnC,SACE,cAAC,IAAD,UAAOhD,EAAE,gBAIY,OAAvBiC,QAAuB,IAAvBA,OAAA,EAAAA,EAAyBH,QAAS,EAC7BG,EAAwBpB,KAAI,SAACqB,EAAQe,GAAT,OACjC,cAAC,IAAD,CAEEC,KAAMhB,EACNiB,GAAIF,EAAQhB,EAAwBH,OAAS,EAAI,OAAS,GAFrDI,EAAOnB,eAAeU,YAO/B,cAAC,KAAD,CAAMsB,MAAM,aAAaC,UAAU,SAAnC,SACGhD,EAAE,yBAvBH,cAAC,KAAD,CAAM+C,MAAM,aAAaC,UAAU,SAAnC,SACGhD,EAAE,iDAyCFF,IAAY+B,GACX,eAAC,IAAD,CAAMuB,cAAc,SAASC,WAAW,SAASC,GAAG,OAApD,UACE,cAAC,KAAD,CAAMP,MAAM,aAAaI,GAAG,MAA5B,SACGnD,EAAE,kCAEL,cAAC,IAAD,CAAQuD,GAAG,mBAAmBf,QAAQ,YAAYD,MAAM,KAAKG,GAAIC,IAAMC,GAAG,QAA1E,SACG5C,EAAE,gCAKX,cAAC,KAAD,CAAqBwD,MAAO,CAAER,UAAW,UAAzC,SACE,cAAC,IAAD,CAAQO,GAAG,mBAAmBb,GAAIC,IAAMC,GAAG,OAAOa,MAAM,OAAOC,UAAW,cAAC,IAAD,CAASX,MAAM,UAAzF,SACG/C,EAAE","file":"static/js/28.2cfcc9af.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Pair } from '@pancakeswap/sdk'\nimport { Text, Flex, LiquidityCardBody , LiquidityCardFooter, Button, AddIcon, ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\nimport { Route, useRouteMatch,Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport FullPositionCard from '../../components/PositionCard'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { usePairs } from '../../hooks/usePairs'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, LiquidityBody } from '../../components/App'\nimport Page from '../Page'\n\nconst Body = styled(LiquidityCardBody)`\n  background-color: ${({ theme }) => theme.colors.dropdownDeep};\n`\n\nexport default function Pool() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const [clickIndex, setIndex] = useState(1);\n  const handleClick = (newIndex) => setIndex(newIndex);\n  const { path, url, isExact } = useRouteMatch();\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs],\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens],\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens,\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  const renderBody = () => {\n\n  \n\n    if (!account) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          {t('Connect to a wallet to view your liquidity.')}\n        </Text>\n      )\n    }\n    if (v2IsLoading) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          <Dots>{t('Loading')}</Dots>\n        </Text>\n      )\n    }\n    if (allV2PairsWithLiquidity?.length > 0) {\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\n        <FullPositionCard\n          key={v2Pair.liquidityToken.address}\n          pair={v2Pair}\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\n        />\n      ))\n    }\n    return (\n      <Text color=\"textSubtle\" textAlign=\"center\">\n        {t('No liquidity found.')}\n      </Text>\n    )\n  }\n\n  return (\n    <Page>\n      <ButtonMenu activeIndex={clickIndex} onItemClick={handleClick} scale=\"sm\" variant=\"subtle\"  marginBottom=\"20px\">\n             <ButtonMenuItem as={Link} to=\"/swap\">\n               {t('Swap')}\n             </ButtonMenuItem>\n             <ButtonMenuItem as={Link} to={`${url}`}>\n               {t('Liquidity')}\n             </ButtonMenuItem>\n      </ButtonMenu>\n      <LiquidityBody>\n        <AppHeader title={t('Your Liquidity')} subtitle={t('Remove liquidity to receive tokens back')} />\n        <Body>\n          {renderBody()}\n          {account && !v2IsLoading && (\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"24px\">\n              <Text color=\"textSubtle\" mb=\"8px\">\n                {t(\"Don't see a pool you joined?\")}\n              </Text>\n              <Button id=\"import-pool-link\" variant=\"secondary\" scale=\"sm\" as={Link} to=\"/find\">\n                {t('Find other LP tokens')}\n              </Button>\n            </Flex>\n          )}\n        </Body>\n        <LiquidityCardFooter style={{ textAlign: 'center' }}>\n          <Button id=\"join-pool-button\" as={Link} to=\"/add\" width=\"100%\" startIcon={<AddIcon color=\"white\" />}>\n            {t('Add Liquidity')}\n          </Button>\n        </LiquidityCardFooter>\n      </LiquidityBody>\n    </Page>\n  )\n}\n"],"sourceRoot":""}