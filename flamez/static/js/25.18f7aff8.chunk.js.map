{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Header.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","referral","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","ml","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","useReferralManager","userReferral","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","CardWraper","Content","StyledTitle","img","StyledText","Header","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","setReferral","params","useParsedQueryString","isAddress","toString","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/25.18f7aff8.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string, referral: string) => {\n      await unstakeFarm(masterChefContract, pid, amount, referral)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, referral: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount, referral)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n  referral: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n  referral,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount, referral)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount, referral)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(\n    async (referral: string) => {\n      await harvestFarm(masterChefContract, farmPid, referral)\n    }, \n    [farmPid, masterChefContract]\n  )\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n  referral: string\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, referral }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward(referral)\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'BYP' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice(lpContract, 'approve', [\n        masterChefContract.address,\n        ethers.constants.MaxUint256,\n      ])\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n  referral: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel, referral }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n        referral={referral}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          BYP\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} referral={referral} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { useReferralManager } from 'state/user/hooks'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const [userReferral, setReferral] = useReferralManager()\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('BYP')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'BYP'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n          referral={userReferral}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of BYP rewards each farm receives, as a proportion of the BYP produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 BYP per block, a 40x farm would receive 40 BYP per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { useReferralManager } from 'state/user/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const [userReferral, setReferral] = useReferralManager()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          BYP\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward(userReferral)\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'BYP' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useReferralManager } from 'state/user/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n  const [userReferral, setReferral] = useReferralManager()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount, userReferral)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount, userReferral)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nconst Link = styled.a`\r\n  width: 100%;\r\n  \r\n`\r\n\r\nconst CardWraper = styled.div`\r\n  background-image: url(/images/blue-card.svg);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-bottom: 20px;\r\n  \r\n  height: 250px;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  border-radius: 19px;\r\n  padding-bottom: 20px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  padding: 24px;\r\n  display: flex;\r\n`\r\nconst LinkImage = styled.img`\r\n  width: 300px;\r\n  margin-top: -3px;\r\n  -webkit-align-items: right;\r\n  display: flex;\r\n   justify-content: right;\r\n   align-items: right;\r\n\r\n   @media screen and (max-width: 800px) {\r\n    width: 0px;\r\n  }\r\n`\r\n\r\nconst StyledTitle = styled(Text)`\r\n  padding: 20px;\r\n  font-size: 30px;\r\n  text-align: left;\r\n  color: white;\r\n  @media screen and (max-width: 500px) {\r\n    padding: 0px;\r\n  }\r\n`\r\nconst StyledText = styled(Text)`\r\n  padding: 20px;\r\n  font-size: 19px;\r\n  text-align: left;\r\n  color: white;\r\n  @media screen and (max-width: 500px) {\r\n    padding: 0px;\r\n  }\r\n`\r\ninterface HeaderProps {\r\n  title: string\r\n}\r\n\r\nconst Header = ({title} : HeaderProps) => {\r\n\r\n  return (\r\n        <CardWraper >\r\n          <Content>\r\n            <div>\r\n              <StyledTitle>{title}</StyledTitle>\r\n              <StyledText>\r\n                BrightyPad is a brand-new integrated cross-chain ecosystem that introduces an all-in-one solution to launch and manage all your decentralized assets.\r\n              </StyledText>\r\n            </div>\r\n            {/* <LinkImage src=\"/images/rocket.svg\" alt=\"Link Image\" /> */}\r\n          </Content>\r\n        </CardWraper>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink, useParams } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { isAddress } from 'utils'\nimport { useUserFarmStakedOnly, useReferralManager } from 'state/user/hooks'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Header from './components/Header'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst LaunchpadRocket = styled.div`\n  width: 300px;\n  margin-top: 47px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  \n  // margin-left: 36.1%;\n  \n  // -webkit-align-items: right;\n   \n  //  @media screen and (max-width: 800px) {\n  //   margin-left: 5%;\n  // }\n`\nconst LinkImage = styled.img`\n  width: 150px;\n  // margin-left: 25%;\n  -webkit-align-items: right;\n  display: flex;\n   justify-content: center;\n   align-items: right;\n   \n   @media screen and (max-width: 800px) {\n  }\n  \n   \n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  const [userReferral, setReferral] = useReferralManager()\n  const params = useParsedQueryString()\n\n  if (params.referral && isAddress(params.referral)) {\n    const referral = params.referral\n    setReferral(referral.toString())\n  } else {\n    setReferral(account)\n  }\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n          }\n          return farmsCurrentlyVisible\n        })\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [chosenFarmsMemoized, observerIsSet])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>      \n      <Page>\n        <Header title=\"Farming\"/>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n          {/* <div style={{display: \"flex\", justifyContent:\"center\", width: \"100%\"}}>\n            <LaunchpadRocket>\n              <LinkImage src=\"/images/2498098.png\" alt=\"Link Image\" />\n              <h6 style={{color:'#6d6d6d', fontSize:'20px', textAlign:'center'}}>Currently there is no opening projects</h6>\n            </LaunchpadRocket>\n          </div> */}\n          \n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}